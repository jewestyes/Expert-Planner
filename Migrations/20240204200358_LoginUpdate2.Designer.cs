// <auto-generated />
using System;
using ExpertPlanner.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpertPlanner.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240204200358_LoginUpdate2")]
    partial class LoginUpdate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ExpertPlanner.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c4dfd64b-0e3b-4b5b-a16f-ad06dfa7ddb3",
                            AccessFailedCount = 0,
                            City = "Москва",
                            ConcurrencyStamp = "898ec564-0d15-4038-b950-6096e4944292",
                            EmailConfirmed = false,
                            FirstName = "Вадим",
                            LastName = "Эдуардович",
                            LockoutEnabled = false,
                            MiddleName = "Дроздов",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAELV3iYQp81jXVCyHBhAYbVONDusqObHHqY9bMATvea0SQRImbXrAal31xyAO92Se1g==",
                            PhoneNumberConfirmed = false,
                            Position = 2,
                            Role = 0,
                            SecurityStamp = "f7bd7900-8c5e-44e3-a92f-8ce325a27188",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "c89c9f39-3acb-4f3c-9643-1f3a78ea6710",
                            AccessFailedCount = 0,
                            City = "Москва",
                            ConcurrencyStamp = "8316bb59-d9b0-4eb7-996d-9e478ea1a6ed",
                            EmailConfirmed = false,
                            FirstName = "Иван",
                            LastName = "Валерьевич",
                            LockoutEnabled = false,
                            MiddleName = "Кулаков",
                            NormalizedUserName = "user1",
                            PasswordHash = "AQAAAAIAAYagAAAAELW9I8FRQ2y/tvHhTpSvOdU4V/2CFQ0jgBckU6JcoyorNsYUqbjZjKmSWc47uXHfhw==",
                            PhoneNumberConfirmed = false,
                            Position = 3,
                            Role = 1,
                            SecurityStamp = "78e4e820-cdb1-42bc-bc2e-d80c6d9aa0da",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "72a3481a-1f70-4e19-b87b-b615ed808b83",
                            AccessFailedCount = 0,
                            City = "Москва",
                            ConcurrencyStamp = "b65f24c7-e681-455c-a7d8-6c7507b72125",
                            EmailConfirmed = false,
                            FirstName = "Михаил",
                            LastName = "Аркадьевич",
                            LockoutEnabled = false,
                            MiddleName = "Киселев",
                            NormalizedUserName = "user2",
                            PasswordHash = "AQAAAAIAAYagAAAAEASkxHKLu1yth/dmVjcUweBdyagVJKrz9aQ4DNcByZhe9SiujdoIcAC4VoJu0D09wg==",
                            PhoneNumberConfirmed = false,
                            Position = 4,
                            Role = 1,
                            SecurityStamp = "001fe37e-3293-41e6-939e-50e600284365",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "299d0bad-4d58-430f-895c-4f37147fdc5f",
                            AccessFailedCount = 0,
                            City = "Москва",
                            ConcurrencyStamp = "65aff170-2110-4256-856c-74fba28f7151",
                            EmailConfirmed = false,
                            FirstName = "Николай",
                            LastName = "Сергеевич",
                            LockoutEnabled = false,
                            MiddleName = "Самохин",
                            NormalizedUserName = "user3",
                            PasswordHash = "AQAAAAIAAYagAAAAEF48U/daKz9JVPcR7MSUTm1igJVv7hPnjnIw4tOiVDV6dGNNn68lZmGVh3ATZ0HrZA==",
                            PhoneNumberConfirmed = false,
                            Position = 4,
                            Role = 1,
                            SecurityStamp = "fdf8b76e-434c-430b-b8a0-f0145a17127e",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "6edcf197-d6de-4e90-bcf2-da3643f59891",
                            AccessFailedCount = 0,
                            City = "Москва",
                            ConcurrencyStamp = "fbdef992-5840-462d-8908-44e28045f7bf",
                            EmailConfirmed = false,
                            FirstName = "Даниил",
                            LastName = "Андреевич",
                            LockoutEnabled = false,
                            MiddleName = "Пашинцев",
                            NormalizedUserName = "user4",
                            PasswordHash = "AQAAAAIAAYagAAAAEKITIUoSGoQjfyMS7WijREqKoJo5Xtz5NFOWmoZE0CW23o5cxeoFrADzXE0E7sfGAQ==",
                            PhoneNumberConfirmed = false,
                            Position = 3,
                            Role = 1,
                            SecurityStamp = "8c1ffd2d-ff22-4438-8636-eaf58850ebaa",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "2201aa4b-f6a4-4665-aeca-fb8559eb4f28",
                            AccessFailedCount = 0,
                            City = "Екатеринбург",
                            ConcurrencyStamp = "7de0dbd7-53bb-4a2a-809f-74ee46967189",
                            EmailConfirmed = false,
                            FirstName = "Андрей",
                            LastName = "Александрович",
                            LockoutEnabled = false,
                            MiddleName = "Ветлугин",
                            NormalizedUserName = "user5",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJ6ZQpBdqnaWWUVifKIGKRLWEyBbXuRClj6TVVK5pMxNdr9IKQb7Yv+gCAIIy/XmA==",
                            PhoneNumberConfirmed = false,
                            Position = 2,
                            Role = 1,
                            SecurityStamp = "cb7bdbe1-eec2-453e-bae8-02e2f5838f0e",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("ExpertPlanner.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExpertPlanner.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExpertPlanner.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertPlanner.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExpertPlanner.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
